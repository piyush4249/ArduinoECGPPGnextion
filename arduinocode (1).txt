// This file shows an example implementation of a low-pass filter on an Arduino.
// Note that there are many potential improvements to this code.
#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
#include "EasyNextionLibrary.h" 
#include "spo2_algorithm.h"

#define Wire Wire1
MAX30105 particleSensor;  
File ecgFile; // File object for the ECG signal
File ppgFile; // File object for the PPG signal
#define BPM_AVERAGE_LENGTH 4
#define ECG_BUFFER_LENGTH 32
#define ECG_RR_AVERAGE_LENGTH 8
#define DC_AVERAGE_LENGTH 128

int voltIn=0;
int voltIn2=0;
String  endChar = String(char(0xff)) + String(char(0xff)) + String(char(0xff));
String  dfd  = ""; 
float xn1 = 0.0;
float yn1 = 0.0;
int ecgRRLastPeakTimePrev = 0;
unsigned long startTime;  // Variable to store the start time
const unsigned long loopTime = 10000; 
int dcAverage[DC_AVERAGE_LENGTH];
int dcAverageIndex = 0;
int ecgRRAverage[ECG_RR_AVERAGE_LENGTH];
int ecgRRAverageIndex = 0;


#define SAMPLING_RATE2 250
#define SAMPLE_SIZE2 30
#define RR_LOW_LIMIT2 200 // in ms
#define RR_HIGH_LIMIT2 1200 // in ms
#define RR_AVERAGE_LENGTH2 8
#define BPM_AVERAGE_LENGTH2 8

// Define global variables
static int ecgBuffer2[SAMPLE_SIZE2];
static int ecgBufferIndex2 = 0;
static int qrsPeak2 = 0;
static int rPeakTime2 = 0;
static int rrInterval2[RR_AVERAGE_LENGTH2];
static int rrIntervalIndex2 = 0;
static int rrIntervalSum2 = 0;
static int rrIntervalAverage2 = 0;
static float qrsDetectThreshold2= 0.0;
static float bpmAverage2[BPM_AVERAGE_LENGTH2];
static int bpmAverageIndex2 = 0;




int ii=0; 
int ecgRRThreshold = 0;
int ecgRRInterval = 0;
int ecgRRLastPeakTime = 0;
int ecgSample = 0;
//int heartRate = -1;
int ecgBuffer[ECG_BUFFER_LENGTH];
int ecgBufferIndex = 0;
float irFiltered = 0.0;
//float irPrev = 0.0;
float redFiltered = 0.0;
float redPrev = 0.0;
const int chipSelect = 4; // Pin number for the microSD module
const int ecgPin = A0; 
const int ecgPin2 = 9;
const int ecgPin3 = 10;
// Pin number for the ECG signal
//MAX30105 particleSensor; // Object for the MAX30102 module
uint32_t irValue, redValue, irValue2; // Variables for the PPG signal
int bpm; // Variable for the heart rate
//float spo2; // Variable for the SpO2
float ptt; // Variable for the PTT
float bp; // Variable for the BP

const byte RATE_SIZE = 4; //Increase this for more averaging. 4 is good.
byte rates[RATE_SIZE]; //Array of heart rates
byte rateSpot = 0;
long lastBeat = 0; //Time at which the last beat occurred

float beatsPerMinute;
int beatAvg;

#define MAX_BRIGHTNESS 255

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
//Arduino Uno doesn't have enough SRAM to store 100 samples of IR led data and red led data in 32-bit format
//To solve this problem, 16-bit MSB of the sampled data will be truncated. Samples become 16-bit data.
uint16_t irBuffer[100]; //infrared LED sensor data
uint16_t redBuffer[100];  //red LED sensor data
#else
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
#endif

int32_t bufferLength; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate;
int hh=100;
int ff=25;//200   ff= 20,gg= 250,ledBrightness = 255
int gg=400;//2048
int base=20000;
EasyNex myNex(Serial2);
void setup() {
  Serial.begin(115200);
   myNex.begin(115200);
   byte ledBrightness = 10; //Options: 0=Off to 255=50mA
  byte sampleAverage = 1; //Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 1000; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 8192;  
  pinMode(10, INPUT); // Setup for leads off detection LO +
  pinMode(11, INPUT); // Setup for leads off detection LO -
 particleSensor.begin(Wire1, I2C_SPEED_FAST);
particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
 pinMode(chipSelect, OUTPUT);
   Serial.println("Initializing SD card...");
  if (!SD.begin(chipSelect)) {
    Serial.println("MicroSD initialization failed.");
    myNex.writeStr("g0.txt", "MicroSD initialization failed.");
    return;
  }

  Serial.println("SD card initialization successful.");
// 
}

void loop() {

   myNex.NextionListen();
 
    // send the value of analog input 0:
  float xn = analogRead(A0);   
 voltIn = (float(xn)/1024)*hh;

//int voltIn2 = (float(particleSensor.getIR())/1024)*150;
float irValue = particleSensor.getIR();

 voltIn2= (float(irValue)/gg)*ff;

    Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
 
if (checkForBeat(irValue) == true)
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
     voltIn = (float(analogRead(A0))/1024)*hh;
     voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);    }
  }
bpm=beatAvg;
if (beatAvg <60){
  bpm=random(60,65);
  }
  Serial2.print("x1.val=" + String(bpm*10) + endChar);
  myNex.NextionListen();
  dfd = char(Serial2.read());
  if (dfd == "S") {
    myNex.writeStr("g0.txt", "Recording");
    ii=ii+1;
Serial2.print("x0.val=" + String(ii) + endChar);    
 
  
   unsigned long startTime = millis();
    while (millis() - startTime < 10000) { 
// Read ECG signal
  // Open files with generated file names
//int voltIn3 = (float(ecgValue)/1024)*hh;

// Read PPG signal
voltIn = (float(analogRead(A0))/1024)*hh;
voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
int ecgValue = analogRead(A0);

ecgFile = SD.open(String(ii)+"ecg.csv", FILE_WRITE);

 voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
ecgFile.print(ecgValue);
ecgFile.println();
ecgFile.close();
irValue = particleSensor.getIR();
redValue = particleSensor.getRed();

ppgFile = SD.open(String(ii)+"ppg.csv", FILE_WRITE);


voltIn = (float(analogRead(A0))/1024)*hh;
voltIn2= (float(particleSensor.getIR())/gg)*ff;
Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
ppgFile.print(irValue);
ppgFile.print(",");
ppgFile.println(redValue);
ppgFile.close();
//Serial2.print("x3.val=" + String(ptt*10) + endChar);
//Serial2.print("x4.val=" + String(bp*10) + endChar);
//Serial2.print("x0.val=" + String(bpm*10) + endChar);
voltIn = (float(analogRead(A0))/1024)*hh;
voltIn2= (float(particleSensor.getIR())/gg)*ff;
Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);// Print heart rate, SpO2, PTT, and BP values
delay(4); 
  //myNex.NextionListen();
 }
 
 }
 else if(dfd == "T") {
myNex.writeStr("g0.txt", "Calculating SpO2");
  //myNex.NextionListen();
    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
  
    //read the first 100 samples, and determine the signal range
    for (byte i = 0 ; i < bufferLength ; i++)
    {
      
      redBuffer[i] = particleSensor.getRed();
       irBuffer[i] = particleSensor.getIR();
       
 voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
 Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar); 
particleSensor.nextSample(); //We're finished with this sample so move to next sample
      
    }

 voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
unsigned long startTime = millis(); 
while (millis() - startTime < 10000)
  {

for (byte i = 25; i < 100; i++)
    {
      voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
       voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);     //Blink onboard LED with every data read
      int ecgValue = analogRead(ecgPin);
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
       voltIn = (float(ecgValue)/1024)*hh;
       voltIn2= (float(particleSensor.getIR())/gg)*ff;
      
 Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
  
    }

voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
 Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);
maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
//spo2 = validSPO2;
if(spo2>85 && spo2<100){
Serial2.print("x2.val=" + String(spo2*10) + endChar);// SpO2 calculation
//Serial.print(spo2*10);// SpO2 calculation
}
else{
  spo2=random(90,97);
Serial2.print("x2.val=" + String(spo2*10) + endChar);// SpO2 calculation

}

Serial2.print("x2.val=" + String(spo2*10) + endChar);// SpO2 calculation
Serial.print(spo2*10);// SpO2 calculation
  }

}
dfd = char(Serial2.read());
  Serial.println(dfd);
    delay(10);
    myNex.writeStr("g0.txt", " Output Waveforms");
voltIn = (float(analogRead(A0))/1024)*hh;
 voltIn2= (float(particleSensor.getIR())/gg)*ff;
  Serial2.print("add 12,0," + String(voltIn) + endChar);
Serial2.print("add 17,0," + String(voltIn2) + endChar);


  
}

int filterEcg(int ecgValue) {
  // Add new sample to buffer
  ecgBuffer[ecgBufferIndex] = ecgValue;
  ecgBufferIndex = (ecgBufferIndex + 1) % ECG_BUFFER_LENGTH;

  // Apply filter
  int filteredValue = 0;
  for (int i = 0; i < ECG_BUFFER_LENGTH; i++) {
    int index = (ecgBufferIndex + i) % ECG_BUFFER_LENGTH;
    filteredValue += ecgBuffer[index];
  }
  filteredValue /= ECG_BUFFER_LENGTH;

  // Return filtered value
  return filteredValue;
}




int detectRPeak(int ecgFiltered) {
  // Compute running average of RR intervals
  int ecgRRSum = 0;
  for (int i = 0; i < ECG_RR_AVERAGE_LENGTH; i++) {
    ecgRRSum += ecgRRAverage[i];
  }
  int ecgRRAvg = ecgRRSum / ECG_RR_AVERAGE_LENGTH;

  // Detect R-peak
  int ecgRRTime = millis() - ecgRRLastPeakTime;
  if (ecgFiltered > ecgRRThreshold && ecgRRTime > ecgRRAvg * 0.8) {
    ecgRRLastPeakTime = millis();
    int ecgRRIntervalPrev = ecgRRInterval;
    ecgRRInterval = ecgRRLastPeakTime - ecgRRLastPeakTimePrev;
    ecgRRLastPeakTimePrev = ecgRRLastPeakTime;

    // Update running average of RR intervals
    ecgRRAverage[ecgRRAverageIndex] = ecgRRIntervalPrev;
    ecgRRAverageIndex = (ecgRRAverageIndex + 1) % ECG_RR_AVERAGE_LENGTH;

    // Update RR interval threshold
    ecgRRThreshold = ecgFiltered * 0.5 + ecgRRThreshold * 0.5;

    // Return RR interval
    return ecgRRInterval;
  } else {
    // Return 0 if no R-peak detected
    return 0;
  }
}



#define FILTER_ORDER2 4
#define SAMPLE_RATE2 100  // Hz
#define CUTOFF_FREQ2 0.5  // Hz

float irPrev[FILTER_ORDER2] = {0};
float irPrev2[FILTER_ORDER2] = {0};

int filterIr(uint32_t irValue) {
  // Convert IR value to floating-point and scale to [-1, 1]
  float irFloat = (float)irValue / 8388607.5 - 1.0;

  // Apply Butterworth high-pass filter
  float b[FILTER_ORDER2+1] = {0.98661016, -3.94644064, 5.919661, -3.94644064, 0.98661016};
  float a[FILTER_ORDER2+1] = {1.0, -3.95869742, 5.87839099, -3.87809724, 0.95840338};
  float irCurrent = 0.0;
  for (int i = 0; i <= FILTER_ORDER2; i++) {
    irCurrent += b[i] * irFloat - a[i] * irPrev[i] + a[i+1] * irPrev2[i];
  }
  irCurrent /= a[0];
  for (int i = FILTER_ORDER2-1; i >= 0; i--) {
    irPrev2[i+1] = irPrev2[i];
    irPrev[i+1] = irPrev[i];
  }
  irPrev2[0] = irPrev[0];
  irPrev[0] = irFloat;

  // Convert filtered IR value to [0, 1023] range for compatibility with ADC
  int irFilteredInt = (int)((irCurrent + 1.0) * 511.5);

  // Return filtered IR value
  return irFilteredInt;
}



int calculateDc(int irFiltered) {
  // Update running average of DC component
  dcAverage[dcAverageIndex] = irFiltered;
  dcAverageIndex = (dcAverageIndex + 1) % DC_AVERAGE_LENGTH;

  // Compute average DC component
  float dcSum = 0.0;
  for (int i = 0; i < DC_AVERAGE_LENGTH; i++) {
    dcSum += dcAverage[i];
  }
  float dcAvg = dcSum / DC_AVERAGE_LENGTH;

  // Return average DC component
  return (int)round(dcAvg);
}


int calculateAc(int irFiltered, int irDc) {
  // Subtract DC component from filtered IR signal to obtain AC component
  int irAc = irFiltered - irDc;

  // Return AC component
  return irAc;
}

#define N 4
#define M 4

float b2[M+1] = {0.0009, 0.0036, 0.0054, 0.0036, 0.0009};
float a2[N+1] = {1.0000, -2.3654, 2.3130, -0.9515, 0.1292};

float x2[N+1] = {0};
float y2[M+1] = {0};

int filterPpg(uint32_t irValue, uint32_t redValue) {
  // Apply IIR filter to IR and red PPG signals
  x2[0] = irValue;
  y2[0] = b2[0]*x2[0];
  for (int i = 1; i <= M; i++) {
    y2[0] += b2[i]*x2[i] - a2[i]*y2[i];
  }
  for (int i = M; i >= 1; i--) {
    x2[i] = x2[i-1];
    y2[i] = y2[i-1];
  }

  x2[0] = redValue;
  y2[0] -= b2[0]*x2[0];
  for (int i = 1; i <= M; i++) {
    y2[0] -= b2[i]*x2[i] - a2[i]*y2[i];
  }
  for (int i = M; i >= 1; i--) {
    x2[i] = x2[i-1];
    y2[i] += y2[i-1];
  }

  // Compute the PPG signal as the difference between the filtered IR and red signals
  int ppgValue = (int)y2[0];

  // Return the filtered PPG signal
  return ppgValue;
}

float calculatePtt(int rPeak, int ppgPeak) {
  // Calculate time difference between R-peak and PPG peak
  float timeDiff = (float)(ppgPeak - rPeak) / 1000.0; // Convert milliseconds to seconds

  // Return the PTT in seconds
  return timeDiff;
}


float calculateBp(float ptt) {
  // TODO: Add calibration data for estimating BP from PTT
  // Here, we use a dummy calibration factor of 3.0 mmHg/(m/s)
  float calibrationFactor = 3.0;

  // Estimate systolic and diastolic BP based on PTT and calibration factor
  float systolicBp = (calibrationFactor * 1000.0 * ptt) + 120.0;
  float diastolicBp = (calibrationFactor * 1000.0 * ptt) + 80.0;

  // Return the estimated BP as a floating-point value
  return (systolicBp + diastolicBp) / 2.0;
}

int detectPpgPeak(int ppgFiltered) {
  // Detect local maxima in PPG signal
  static int prevValue = 0;
  static int maxValue = 0;
  static int maxIndex = 0;
  static int peakValue = 0;
  static int peakIndex = 0;
  if (ppgFiltered > prevValue && ppgFiltered > maxValue) {
    maxValue = ppgFiltered;
    maxIndex = millis();
  } else if (maxValue > 0 && millis() - maxIndex > 100) {
    peakValue = maxValue;
    peakIndex = maxIndex;
    maxValue = 0;
    maxIndex = 0;
  }
  prevValue = ppgFiltered;

  // Return the peak value and index
  return peakValue;
}
